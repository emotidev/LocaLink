// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  profile       Profile?
  following     Profile[] @relation("Following")
  followers     Profile[] @relation("Followers")
  createdChats  Chat[]    @relation("from")
  receivedChats Chat[]    @relation("to")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  culture   Culture  @relation(fields: [cultureId], references: [id])
  cultureId String
}

model Profile {
  id        String  @id @default(cuid())
  phone     String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique
  following User[]  @relation("Following")
  followers User[]  @relation("Followers")
  culture   Culture @relation(fields: [cultureId], references: [id])
  cultureId String
  chats     Chat[]
}

model Culture {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  posts     Post[]
  profiles  Profile[]
}

model Chat {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  to        User      @relation("to", fields: [toId], references: [id])
  from      User      @relation("from", fields: [fromId], references: [id])
  toId      String
  fromId    String
  Profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId String?
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  fromUser  Boolean
}
